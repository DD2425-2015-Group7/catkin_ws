#include <ros/ros.h>
#include <actionlib/server/simple_action_server.h>
#include <robot_actionlib/TestAction.h>

#include <geometry_msgs/Twist.h>
#include <math.h>
//#include "ir_sensors/RangeArray.h"
#include <cmath>
#include <stdlib.h>
#include <time.h>


class TestAction
{
protected:

  ros::NodeHandle nh_;
  // NodeHandle instance must be created before this line. Otherwise strange error may occur.
  actionlib::SimpleActionServer<robot_actionlib::TestAction> as_; 
  std::string action_name_;
  // create messages that are used to published feedback/result
  robot_actionlib::TestFeedback feedback_;
  robot_actionlib::TestResult result_;


  const static double alpha = 25;
  // The minimum distance allowed between the front sensors and a wall
  const static  float front_limit = 0.25;
  const static float side_limit = 0.15;
  const static float init_front_limit_max = 0.5;
  const static float init_side_limit_max = 0.5;
  // Private parameter for the linear speed
  const static float l_speed = 0.2;
  const static float a_speed = 1.5;
  const static enum States{
    EMPTY = 0,
    RIGHT,
    LEFT,
    FRONT
  } stateType;

  ros::Publisher twist_pub;
  ros::Subscriber test_sub;

  double distance_lefts_front;
  double distance_lefts_back;
  double distance_front_left;
  double distance_front_right;
  double distance_rights_front;
  double distance_rights_back;

  // Coresponding to the right decision side
  bool side;
  bool flagReady;

  States state;
  int counter;

  geometry_msgs::Twist msg;

public:

  TestAction(std::string name) :
    as_(nh_, name, boost::bind(&TestAction::executeCB, this, _1), false),
    action_name_(name)
  {
    twist_pub = nh_.advertise<geometry_msgs::Twist>("/cmd_vel", 1000);
    //  ros::Subscriber dist_sub = nh_.subscribe("/ir_publish/sensors", 1, &TestAction::distanceCallback, this)
    test_sub = nh_.subscribe("/cmd_vel", 1, &TestAction::testCallback, this);

    distance_lefts_front = init_side_limit_max;
    distance_lefts_back = init_side_limit_max;
    distance_front_left = init_front_limit_max;
    distance_front_right = init_front_limit_max;
    distance_rights_front = init_side_limit_max;
    distance_rights_back = init_side_limit_max;

    // Coresponding to the right decision side
    side = 0;
    flagReady = 0;
    
    srand(time(NULL));

    state = FRONT;
    counter = 0;

    as_.start();
  }

  ~TestAction(void)
  {
  }

  void executeCB(const robot_actionlib::TestGoalConstPtr &goal)
  {
    // helper variables
    ros::Rate loop_rate(25);
    bool success = true;

    // push_back the seeds for the fibonacci sequence
    feedback_.sequence.clear();
    feedback_.sequence.push_back(0);
    feedback_.sequence.push_back(1);

    // publish info to the console for the user
    ROS_INFO("%s: Executing, creating fibonacci sequence of order %i with seeds %i, %i", action_name_.c_str(), goal->order, feedback_.sequence[0], feedback_.sequence[1]);


    bool front = 0;
    bool right = 0;
    bool left = 0;
    double right_average = 0;
    double left_average = 0;
    
    
    while(ros::ok())
    {
      ROS_INFO("AAA: %d ", as_.isPreemptRequested());
      // check that preempt has not been requested by the client
      if (as_.isPreemptRequested() || !ros::ok())
      {
        ROS_INFO("%s: Preempted", action_name_.c_str());
        // set the action state to preempted
        as_.setPreempted();
        success = false;
        break;
      }

      
	// front = (distance_front_left < front_limit) || (distance_front_right < front_limit);
        // right = (distance_rights_front < side_limit) && (distance_rights_back < side_limit);
        // left = (distance_lefts_front < side_limit) && (distance_lefts_back < side_limit);
        // right_average = (distance_rights_front + distance_rights_back)/2;
        // left_average = (distance_lefts_front + distance_lefts_back)/2;

	flagReady = true;
	if (!TestAction::flagReady) {
	  ros::spinOnce();
	  loop_rate.sleep();
	  continue;
        }

	// Update of the state
        if(front){ // The front is the most prior
	  if(right_average > left_average){
	    side = 0;
	  }else{
	    side = 1;
	  }
	  state = FRONT;
	  std::cerr << "FRONT" << std::endl;
        } else if (right) { // The right is prefered
	  /*if(state != RIGHT){
	    direction = rand()%2;
	    std::cerr << direction << std::endl;
            }*/
	  state = RIGHT;
	  std::cerr << "RIGHT" << std::endl;
        } else if (left) {
	  /*if(state != LEFT){
	    direction = rand()%2;
	    std::cerr << direction << std::endl;
            }*/
	  //direction = rand()%1;

	  state = LEFT;
	  std::cerr << "LEFT" << std::endl;
        } else {
	  state = EMPTY;
	  std::cerr << "EMPTY" << std::endl;
        }

        // Action depending on the state
        switch(state) {
        case(EMPTY): // Just go straight
	  msg.linear.x = smoothUpdateVelocity(msg.linear.x, l_speed, 0.05);
	  msg.angular.z = smoothUpdateVelocity(msg.angular.z, 0, 0.1);
	  break;
        case(FRONT):
	  msg.linear.x = 0;
	  if(side == 1){
	    msg.angular.z = smoothUpdateVelocity(msg.angular.z, a_speed, 0.1);
	  }else{
	    msg.angular.z = smoothUpdateVelocity(msg.angular.z, -a_speed, 0.1);
	  }

	  break;
        case(RIGHT):
	  msg.linear.x = smoothUpdateVelocity(msg.linear.x, l_speed, 0.05);
	  msg.angular.z = - alpha * ( (double)distance_rights_front - (double)distance_rights_back);
	  break;
        case(LEFT):
	  msg.linear.x = smoothUpdateVelocity(msg.linear.x, l_speed, 0.05);
	  msg.angular.z = alpha * ( (double)distance_lefts_front - (double)distance_lefts_back);
	  break;
        default:
	  break;
        }

        // P-controller to generate the angular velocity of the robot, to follow the wall
        //msg.angular.z = alpha * ( (double)distance_lefts_front- (double)distance_lefts_back);
        //ROS_INFO("Linear velocity :%f", msg.linear.x);
        //ROS_INFO("Angular velocity :%f", msg.angular.z);
        if(counter > 10){
	  twist_pub.publish(msg);
        }else {
	  counter += 1;
        }


	feedback_.sequence.push_back(feedback_.sequence[1] + feedback_.sequence[0]);
      // publish the feedback
      as_.publishFeedback(feedback_);


	

        ros::spinOnce();
        loop_rate.sleep();
  
    }

    if(success)
    {
      result_.sequence = feedback_.sequence;
      ROS_INFO("%s: Succeeded", action_name_.c_str());
      // set the action state to succeeded
      as_.setSucceeded(result_);
    }
  }

  double smoothUpdateVelocity(double current, double required, double step){
    double diff = current - required;
    if(fabs(diff) > 1.5*step){
      current -= (diff > 0) ? step : -step;
    } else {
      current = required;
    }
    return current;
  }

  // void distanceCallback(const ir_sensors::RangeArray::ConstPtr &msg)
  // {
  //   assert(msg->array.size() == 6);
    
  //   distance_lefts_front = msg->array[0].range;
  //   distance_lefts_back = msg->array[1].range;
  //   distance_front_left = msg->array[2].range;
  //   distance_front_right = msg->array[3].range;
  //   distance_rights_front = msg->array[4].range;
  //   distance_rights_back = msg->array[5].range;

  //   flagReady = 1;
  // }


   void testCallback(const geometry_msgs::Twist::ConstPtr &msg)
  {
    ROS_INFO("Test cbTest: %f", msg->linear.x );
  }

};


int main(int argc, char** argv)
{
  ros::init(argc, argv, "fibonacci");

  TestAction fibonacci(ros::this_node::getName());
  ros::spin();

  return 0;
}
